import json
import os

import pytest

from configs.project_paths import CHROME_COOKIES_PATH
from decorators.waits import repeat_until_true
from log import logger
from ui.pages.old.google_meet_base_page import GoogleMeetBasePage


def save_cookies_to_file(cookies, file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'w') as f:
        json.dump(cookies, f)

@repeat_until_true(steps=60, delay=5)
def load_cookies_from_file(file_path):
    """Waits for chrome cookies file, generated by login_and_save_cookie fixture"""
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return json.load(f)
    return None


@pytest.fixture(scope="function", autouse=True)
def login_and_save_cookie(worker_id, google_login_page):
    logger.debug('Chrome cookie generating started.%s', worker_id)
    if worker_id in ['gw0','master']:
        logger.debug('Chrome cookie generating started.')
        if not os.path.exists(CHROME_COOKIES_PATH):
            google_login_page.login(username=os.getenv('GOOGLE_LOGIN'),
                                    password=os.getenv('GOOGLE_PASSWORD'))
            cookies = google_login_page.page.context.cookies()
            save_cookies_to_file(cookies, CHROME_COOKIES_PATH)
            logger.debug('Cookies file is created.')
        yield google_login_page
    else:
        yield google_login_page



@pytest.fixture(scope="function")
def google_meet_start_page(page):
    gm_start_page = GoogleMeetBasePage(page)
    cookies = load_cookies_from_file(CHROME_COOKIES_PATH)
    if cookies:
        gm_start_page.page.context.add_cookies(cookies)
        gm_start_page.open()
        gm_start_page.screenshot('page_after_cookies_pasting.png')
    else:
        pytest.fail("Cookies not found. The first test might not have performed the login.")
    yield gm_start_page